@page "/"

@inject HttpClient httpClient

@using FrontEnd.Services.Contracts;
@inject ICEAS CEASService
@inject IJSRuntime jsRuntime

@using System.Text
@using System.Text.Json
@using FrontEnd.Models

<div class="content">
    <div class="code-section">
        <div class="left-column">
            <div class="editor-config">
                <div class="editor-config-settingitem">
                    <label for="idCodeSelect">Select language:</label>
                    <select id="idCodeSelect" @onchange="HandleIdCodeChange">
                        <option value="1">Python</option>
                        <option value="3">C#</option>
                    </select>
                </div>
                <div class="editor-config-settingitem">
                    <label for="idThemeSelect">Select theme:</label>
                        <select id="idThemeSelect"
                            @onchange="ChangeTheme">
                            <option value="vs">Visual Studio</option>
                            <option value="vs-dark">Visual Studio Dark</option>
                            <option value="hc-black">High Contrast Black</option>
                        </select>
                </div>
                <button @onclick="RunCompiler">Run</button>
            </div>

            <div class="editor"> 
                <StandaloneCodeEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions"
                OnDidInit="EditorOnDidInit" OnDidChangeModelContent="HandleInput" />
            </div>

        </div>

        <div class="right-column">
                <div class="editor-config">
                    <h3>Output:</h3>
                </div>

            <div class="editor">
                <StandaloneCodeEditor @ref="_output" ConstructionOptions="OutputConstructionOptions" />
            </div>
        </div>
    </div>

    <div class="code-status">
        <div class="code-status-resume">
            <p>Code Status: </p>
            <p class="code-status-sub"><span class="icon icon-error"></span>@sintaxisModel.errors</p>
            <p class="code-status-sub"><span class="icon icon-warming"></span>@sintaxisModel.obs</p>
        </div>
        <div style="text-align: left;">
            <ul>
                @foreach (var errorMsg in sintaxisModel.errorMsg)
                {
                    <li>
                        <p class="code-status-sub"><span class="icon icon-error"></span>@errorMsg</p>

                    </li>
                }
            </ul>
        </div>
        <div style="text-align: left;">
            <ul>
                @foreach (var obMsg in sintaxisModel.obsMsg)
                {
                    <li>
                        <p class="code-status-sub"><span class="icon icon-warming"></span>@obMsg</p>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


@code {
    private StandaloneCodeEditor _editor = null!;
    private StandaloneCodeEditor _output = null!;
    private string code = "";
    private int selectedIdCode = 1;
    private RunModel outputModel = new RunModel();
    private SintaxisModel sintaxisModel = new SintaxisModel();
    private Timer debounceTimer;
    private int debounceDelay = 500;
    private CancellationTokenSource debounceCancellationTokenSource;
    private string[] decorationIds =  new string[0];

    private async Task EditorOnDidInit()
    {
        var newDecorations = new ModelDeltaDecoration[]
        {
new ModelDeltaDecoration
{
Range = new BlazorMonaco.Range(3,1,3,1),
Options = new ModelDecorationOptions
{
IsWholeLine = true,
ClassName = "decorationContentC1ass",
GlyphMarginClassName = "decorationGlyphMarginC1ass"
}
}
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
    }


    private async Task HandleIdCodeChange(ChangeEventArgs e)
    {
        var model = await _editor.GetModel();
        string codelang = "plaintext";

        if (int.TryParse(e.Value?.ToString(), out var idCode))
        {
            selectedIdCode = idCode;
            await CheckSintaxis();

            switch (idCode)
            {
                case 1:
                    codelang = "python";
                    break;
                case 3:
                    codelang = "csharp";
                    break;
                default:
                    break;

            }
        }

        await BlazorMonaco.Editor.Global.SetModelLanguage(jsRuntime, model, codelang);

        switch (idCode)
        {
            case 1:
                SetExampleHelloWordPython();
                break;
            case 3:
                SetExampleHelloWordCSharp();
                break;
            default:
                break;

        }
    }

    private async void SetExampleHelloWordPython()
    {
        await _editor.SetValue("print(\"Hello, World!\")");
    }

    private async void SetExampleHelloWordCSharp()
    {
        await _editor.SetValue("public class Program \n{\n\t public static void Main(string[] args) \n\t { \n\t\t System.Console.WriteLine(\"Hello, World!\");\n\t }\n }");
    }

    private async Task HandleInput(ModelContentChangedEvent e)
    {
        debounceCancellationTokenSource?.Cancel();

        debounceCancellationTokenSource = new CancellationTokenSource();

        try
        {
            // Esperar durante el tiempo de espera antes de ejecutar CheckSintaxis()
            await Task.Delay(debounceDelay, debounceCancellationTokenSource.Token);

            // Verificar si la cancelación se solicitó antes de continuar
            debounceCancellationTokenSource.Token.ThrowIfCancellationRequested();

            await CheckSintaxis();
        }
        catch (TaskCanceledException)
        {
            // La tarea fue cancelada
        }
    }

    private async Task CheckSintaxis()
    {
        code = await _editor.GetValue();
        sintaxisModel = await CEASService.CheckSintaxisAsync(selectedIdCode, code);
    }

    private async Task RunCompiler()
    {
        outputModel = await CEASService.RunCompilerAsync(selectedIdCode, code);
        await _output.SetValue(outputModel.output);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "python",
                Value = "",
                GlyphMargin = true,
                Folding = false,
                WordBasedSuggestionsOnlySameLanguage = true
            };
    }

    private StandaloneEditorConstructionOptions OutputConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                ReadOnly = true,
                Contextmenu = false,
                Language = "plaintext",
                Value = "Bienvenido a CEAS!",
                LineNumbers = "off",
                GlyphMargin = false,
                Folding = false,
                Theme = "vs-dark"
            };
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());
    }
}
